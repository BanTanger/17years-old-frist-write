//#define _CRT_SECURE_NO_WARNINGS 1
//#include<iostream>
//#include<vector>
//using namespace std;
//
//class Solution {
//public:
//    void generateMatrix(vector<vector<int>>& res,int& n) {
//        int startx = 0, starty = 0; // 定义每循环一个圈的起始位置
//        int loop = n / 2; // 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理
//        int mid = n / 2; // 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)
//        int count = 1; // 用来给矩阵中每一个空格赋值
//        int offset = 1; // 每一圈循环，需要控制每一条边遍历的长度
//        int i, j;
//        while (loop--) {
//            i = startx;
//            j = starty;
//
//            // 下面开始的四个for就是模拟转了一圈
//            // 模拟填充上行从左到右(左闭右开)
//            for (j = starty; j < starty + n - offset; j++) {
//                res[startx][j] = count++;
//            }
//            // 模拟填充右列从上到下(左闭右开)
//            for (i = startx; i < startx + n - offset; i++) {
//                res[i][j] = count++;
//            }
//            // 模拟填充下行从右到左(左闭右开)
//            for (; j > starty; j--) {
//                res[i][j] = count++;
//            }
//            // 模拟填充左列从下到上(左闭右开)
//            for (; i > startx; i--) {
//                res[i][j] = count++;
//            }
//
//            // 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)
//            startx++;
//            starty++;
//
//            // offset 控制每一圈里每一条边遍历的长度
//            offset += 2;
//        }
//
//        // 如果n为奇数的话，需要单独给矩阵最中间的位置赋值
//        if (n % 2) {
//            res[mid][mid] = count;
//        }
//    }
//};
//int main() {
//    int n;
//    cin >> n;
//    vector<vector<int>> res(n, vector<int>(n, 0));
//    Solution solution;
//    solution.generateMatrix(res, n);
//    for (int i = 0; i < res.size(); i++) {
//        for (int j = 0; j < res[0].size(); j++) {
//            printf("%-3d", res[i][j]);
//        }
//        cout << endl;
//    }
//}